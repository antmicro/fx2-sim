# op_code
00 no_operation
01 absolute_jump
02 long_jump
03 rotate_right
04 increment_accumulator
05 increment_(direct)
06 increment_@Ri
07 increment_@Ri
08 increment_Rn
09 increment_Rn
0a increment_Rn
0b increment_Rn
0c increment_Rn
0d increment_Rn
0e increment_Rn
0f increment_Rn
10 jump_if_bit_set_and_clear_bit
11 absolute_call
12 long_call
13 rotate_right_thrugh_carry
14 decrement_accumulator_a=a-1
15 decrement_direct_(direct)=(direct)-1
16 decrement_indirect_@Ri=@Ri-1
17 decrement_indirect_@Ri=@Ri-1
18 decrement_reg_Rn=Rn-1
19 decrement_reg_Rn=Rn-1
1a decrement_reg_Rn=Rn-1
1b decrement_reg_Rn=Rn-1
1c decrement_reg_Rn=Rn-1
1d decrement_reg_Rn=Rn-1
1e decrement_reg_Rn=Rn-1
1f decrement_reg_Rn=Rn-1
20 jump_if_bit_set
21 absolute_jump
22 return_from_subrutine
23 rotate_left
24 add_A=A+constant
25 add_A=A+(direct)
26 add_A=A+@Ri
27 add_A=A+@Ri
28 add_A=A+Rx
29 add_A=A+Rx
2a add_A=A+Rx
2b add_A=A+Rx
2c add_A=A+Rx
2d add_A=A+Rx
2e add_A=A+Rx
2f add_A=A+Rx
30 jump_if_bit_not_set
31 absolute_call
32 return_from_interrupt
33 rotate_left_thrugh_carry
34 add_A=A+constant+c
35 add_A=A+(direct)+c
36 add_A=A+@Ri+c
37 add_A=A+@Ri+c
38 add_A=A+Rx+c
39 add_A=A+Rx+c
3a add_A=A+Rx+c
3b add_A=A+Rx+c
3c add_A=A+Rx+c
3d add_A=A+Rx+c
3e add_A=A+Rx+c
3f add_A=A+Rx+c
40 jump_if_carry_is_set
41 absolute_jump
42 or_(direct)=(direct)_or_A
43 or_(direct)=(direct)_or_constant
44 or_A=A_or_constant
45 or_A=A_or_(direct)
46 or_A=A_or_@Ri
47 or_A=A_or_@Ri
48 or_A=A_or_Rn
49 or_A=A_or_Rn
4a or_A=A_or_Rn
4b or_A=A_or_Rn
4c or_A=A_or_Rn
4d or_A=A_or_Rn
4e or_A=A_or_Rn
4f or_A=A_or_Rn
50 jump_if_carry_not_set
51 absolute_call
52 and_(direct)=(direct)^A
53 and_(direct)=(direct)^constant
54 and_A=A^constant
55 and_A=A^(direct)
56 and_A=A^@Ri
57 and_A=A^@Ri
58 and_A=A^Rx
59 and_A=A^Rx
5a and_A=A^Rx
5b and_A=A^Rx
5c and_A=A^Rx
5d and_A=A^Rx
5e and_A=A^Rx
5f and_A=A^Rx
60 jump_if_accumulator_zero
61 absolute_jump
62 XOR_(direct)=(direct)_XOR_A
63 XOR_(direct)=(direct)_XOR_constant
64 XOR_A=A_XOR_constant
65 XOR_A=A_XOR_(direct)
66 XOR_A=A_XOR_@Ri
67 XOR_A=A_XOR_@Ri
68 XOR_A=A_XOR_Rn
69 XOR_A=A_XOR_Rn
6a XOR_A=A_XOR_Rn
6b XOR_A=A_XOR_Rn
6c XOR_A=A_XOR_Rn
6d XOR_A=A_XOR_Rn
6e XOR_A=A_XOR_Rn
6f XOR_A=A_XOR_Rn
70 jump_if_accumulator_not_zero
71 absolute_call
72 or_c_=_c_or_bit
73 jump_indirect
74 move_A=constant
75 move_(direct)=constant
76 move_@Ri=constant
77 move_@Ri=constant
78 move_Rn=constant
79 move_Rn=constant
7a move_Rn=constant
7b move_Rn=constant
7c move_Rn=constant
7d move_Rn=constant
7e move_Rn=constant
7f move_Rn=constant
80 short_jump
81 absolute_jump
82 and_c=c^bit
83 move_A=pc+A
84 divide
85 move_(direct)=(direct)
86 move_(direct)=@Ri
87 move_(direct)=@Ri
88 move_(direct)=Rn
89 move_(direct)=Rn
8a move_(direct)=Rn
8b move_(direct)=Rn
8c move_(direct)=Rn
8d move_(direct)=Rn
8e move_(direct)=Rn
8f move_(direct)=Rn
90 move_dptr=constant(16_bit)
91 absolute_call
92 move_bit=c
93 move_A=dptr+A
94 substract_with_borrow_A=A-c-constant
95 substract_with_borrow_A=A-c-(direct)
96 substract_with_borrow_A=A-c-@Ri
97 substract_with_borrow_A=A-c-@Ri
98 substract_with_borrow_A=A-c-Rn
99 substract_with_borrow_A=A-c-Rn
9a substract_with_borrow_A=A-c-Rn
9b substract_with_borrow_A=A-c-Rn
9c substract_with_borrow_A=A-c-Rn
9d substract_with_borrow_A=A-c-Rn
9e substract_with_borrow_A=A-c-Rn
9f substract_with_borrow_A=A-c-Rn
a0 or_c_=_c_or_!bit
a1 absolute_jump
a2 move_c=bit
a3 increment_data_pointer
a4 multiply_a*b
a6 move_@Ri=(direct)
a7 move_@Ri=(direct)
a8 move_Rn=(direct)
a9 move_Rn=(direct)
aa move_Rn=(direct)
ab move_Rn=(direct)
ac move_Rn=(direct)
ad move_Rn=(direct)
ae move_Rn=(direct)
af move_Rn=(direct)
b0 and_c=c^!bit
b1 absolute_call
b2 complement_bit
b3 complement_carry
b4 compare_and_jump_if_not_equal;_a<>constant
b5 compare_and_jump_if_not_equal;_a<>(direct)
b6 compare_and_jump_if_not_equal;_@Ri<>constant
b7 compare_and_jump_if_not_equal;_@Ri<>constant
b8 compare_and_jump_if_not_equal;_Rx<>constant
b9 compare_and_jump_if_not_equal;_Rx<>constant
ba compare_and_jump_if_not_equal;_Rx<>constant
bb compare_and_jump_if_not_equal;_Rx<>constant
bc compare_and_jump_if_not_equal;_Rx<>constant
bd compare_and_jump_if_not_equal;_Rx<>constant
be compare_and_jump_if_not_equal;_Rx<>constant
bf compare_and_jump_if_not_equal;_Rx<>constant
c0 stack_push
c1 absolute_jump
c2 clear_bit
c3 clear_carry
c4 swap_A(0-3)_<->_A(4-7)
c5 exchange_A<->(direct)
c6 exchange_A<->@Ri
c7 exchange_A<->@Ri
c8 exchange_A<->Rn
c9 exchange_A<->Rn
ca exchange_A<->Rn
cb exchange_A<->Rn
cc exchange_A<->Rn
cd exchange_A<->Rn
ce exchange_A<->Rn
cf exchange_A<->Rn
d0 stack_pop
d1 absolute_call
d2 set_bit
d3 set_carry
d4 decimal_adjust_(A)
d5 decrement_and_jump_if_not_zero_(direct)
d6 exchange_digit_A<->Ri
d7 exchange_digit_A<->Ri
d8 decrement_and_jump_if_not_zero
d9 decrement_and_jump_if_not_zero
da decrement_and_jump_if_not_zero
db decrement_and_jump_if_not_zero
dc decrement_and_jump_if_not_zero
dd decrement_and_jump_if_not_zero
de decrement_and_jump_if_not_zero
df decrement_and_jump_if_not_zero
e0 move_A=(dptr)
e1 absolute_jump
e2 move_A=(@Ri)
e3 move_A=(@Ri)
e4 clear_accumulator
e5 move_A=(direct)
e6 move_A=@Ri
e7 move_A=@Ri
e8 move_A=Rn
e9 move_A=Rn
ea move_A=Rn
eb move_A=Rn
ec move_A=Rn
ed move_A=Rn
ee move_A=Rn
ef move_A=Rn
f0 move_(dptr)=A
f1 absolute_call
f2 move_(@Ri)=A
f3 move_(@Ri)=A
f4 complement_accumulator
f5 move_(direct)=A
f6 move_@Ri=A
f7 move_@Ri=A
f8 move_Rn=A
f9 move_Rn=A
fa move_Rn=A
fb move_Rn=A
fc move_Rn=A
fd move_Rn=A
fe move_Rn=A
ff move_Rn=A
